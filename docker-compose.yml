version: '3.5'

services:
  # Milvus 백엔드 서비스
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
#    volumes:
#      - ./volumes/etcd:/etcd
#      - ./volumes/logs/etcd:/var/log/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - rag_network
    profiles:
      - full
      - rag-only

  minio:
    container_name: milvus-minio
    image: quay.io/minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
 #   volumes:
 #     - ./volumes/minio:/minio_data
 #     - ./volumes/logs/minio:/var/log/minio
    command: minio server /minio_data --console-address ":9001" --address ":9000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - rag_network
    profiles:
      - full
      - rag-only

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.4.9
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ./milvus/milvus.yaml:/milvus/configs/milvus.yaml
 #     - ./volumes/milvus:/var/lib/milvus
 #     - ./volumes/logs/milvus:/var/log/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - rag_network
    profiles:
      - full
      - rag-only

  # Nginx 서비스
  nginx:
    image: nginx:latest
    container_name: ${NGINX_CONTAINER_NAME:-milvus-nginx}
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - shared_tmp:/tmp
  #    - ./volumes/logs/nginx:/var/log/nginx
    ports:
      - "80:80"
    depends_on:
      - rag
      - reranker
    networks:
      - rag_network
    profiles:
      - full
      - rag-only
      - reranker-only
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80

  # RAG 서비스
  rag:
    build: ./rag
    container_name: milvus-rag
    volumes:
      - ./rag:/rag
      - shared_tmp:/tmp
    environment:
      - MILVUS_HOST=milvus-standalone
      - MILVUS_PORT=19530
      - UWSGI_PROTOCOL=fastcgi
      - UWSGI_SOCKET=/tmp/rag.sock
      - UWSGI_CHMOD_SOCKET=666
    depends_on:
      - standalone
    networks:
      - rag_network
    command: uwsgi --ini /rag/uwsgi.ini
    profiles:
      - full
      - rag-only

  # Reranker 서비스 (API Gateway 포함)
  reranker:
    build: ./reranker
    container_name: milvus-reranker
    volumes:
      - ./reranker:/reranker
      - shared_tmp:/tmp
#      - ./volumes/logs/reranker:/var/log/reranker
      - ./flashrank:/usr/local/lib/python3.10/site-packages/flashrank
    environment:
      - RERANKER_CONFIG=/reranker/config.json
      - FLASHRANK_MODEL=gte-multilingual-reranker-base
      - FLASHRANK_CACHE_DIR=/reranker/models
      - RAG_ENDPOINT=http://nginx/rag
      - UWSGI_PROTOCOL=fastcgi
      - UWSGI_SOCKET=/tmp/reranker.sock
      - UWSGI_CHMOD_SOCKET=666
    networks:
      - rag_network
    command: uwsgi --ini /reranker/uwsgi.ini
    profiles:
      - full
      - reranker-only

networks:
  rag_network:
    name: rag_network
    external: true

volumes:
  shared_tmp:
    name: ${COMPOSE_PROJECT_NAME:-rag}_shared_tmp 