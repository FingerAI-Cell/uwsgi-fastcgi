# Docker Compose 설정
# version: '3.5' 제거 (더 이상 사용되지 않음)

services:
  # Milvus 백엔드 서비스
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${MILVUS_DATA_PATH:-/var/lib/milvus-data}/etcd:/etcd
      - ${MILVUS_DATA_PATH:-/var/lib/milvus-data}/logs/etcd:/var/log/etcd
    command: /bin/sh -c "chmod -R 700 /etcd && etcd -advertise-client-urls=http://etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd"
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    depends_on:
      - etcd_init
    networks:
      - rag_network
    profiles:
      - all
      - rag-only
      - db-only

  # etcd 서비스 시작 전 권한 설정을 위한 초기화 서비스 추가
  etcd_init:
    container_name: milvus-etcd-init
    image: alpine:latest
    volumes:
      - ${MILVUS_DATA_PATH:-/var/lib/milvus-data}/etcd:/etcd
    command: sh -c "mkdir -p /etcd/member && chmod -R 700 /etcd && echo 'etcd 디렉토리 권한 설정 완료'"
    networks:
      - rag_network
    profiles:
      - all
      - rag-only
      - db-only

  minio:
    container_name: milvus-minio
    image: quay.io/minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ${MILVUS_DATA_PATH:-/var/lib/milvus-data}/minio:/minio_data
      - ${MILVUS_DATA_PATH:-/var/lib/milvus-data}/logs/minio:/var/log/minio
    command: minio server /minio_data --console-address ":9001" --address ":9000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - rag_network
    profiles:
      - all
      - rag-only
      - db-only

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.4.9
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ./milvus/milvus.yaml:/milvus/configs/milvus.yaml
      - ${MILVUS_DATA_PATH:-/var/lib/milvus-data}/milvus:/var/lib/milvus
      - ${MILVUS_DATA_PATH:-/var/lib/milvus-data}/logs/milvus:/var/log/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "minio"
    networks:
      - rag_network
    profiles:
      - all
      - rag-only
      - db-only

  # Nginx 서비스
  nginx:
    image: nginx:latest
    container_name: ${NGINX_CONTAINER_NAME:-milvus-nginx}
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/locations-enabled:/etc/nginx/locations-enabled
      - shared_tmp:/tmp
      - ./volumes/logs/nginx:/var/log/nginx
    ports:
    # 임시 변경 외부에서 가능하게 3000으로 기존 80
      - "3000:80"
    networks:
      - rag_network
    profiles:
      - all
      - rag-only
      - reranker-only
      - prompt-only
      - app-only
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80

  # RAG 서비스
  rag:
    build: ./rag
    container_name: milvus-rag
    volumes:
      - ./rag:/rag
      - shared_tmp:/tmp
    environment:
      - MILVUS_HOST=milvus-standalone
      - MILVUS_PORT=19530
      - UWSGI_PROTOCOL=fastcgi
      - UWSGI_SOCKET=/tmp/rag.sock
      - UWSGI_CHMOD_SOCKET=666
    depends_on:
      - standalone
    networks:
      - rag_network
    command: uwsgi --ini /rag/uwsgi.ini
    profiles:
      - all
      - rag-only
      - app-only

  # Reranker 서비스 (API Gateway 포함)
  reranker:
    build: ./reranker
    container_name: milvus-reranker
    volumes:
      - ./reranker:/reranker
      - shared_tmp:/tmp
      - ./volumes/logs/reranker:/var/log/reranker
      - ./flashrank:/usr/local/lib/python3.10/site-packages/flashrank
    environment:
      - RERANKER_CONFIG=/reranker/config.json
      - FLASHRANK_MODEL=gte-multilingual-reranker-base
      - FLASHRANK_CACHE_DIR=/reranker/models
      - RAG_ENDPOINT=http://nginx/rag
      - UWSGI_PROTOCOL=fastcgi
      - UWSGI_SOCKET=/tmp/reranker.sock
      - UWSGI_CHMOD_SOCKET=666
    networks:
      - rag_network
    command: uwsgi --ini /reranker/uwsgi.ini
    profiles:
      - all
      - reranker-only
      - app-only

  # 프롬프트 백엔드 서비스
  prompt:
    build: ./prompt
    container_name: milvus-prompt
    volumes:
      - ./prompt:/prompt
      - shared_tmp:/tmp
      - ./volumes/logs/prompt:/var/log/prompt
    environment:
      - PROMPT_CONFIG=/prompt/config.json
      - RAG_ENDPOINT=http://nginx/rag
      - RERANKER_ENDPOINT=http://nginx/reranker
      - OLLAMA_ENDPOINT=http://ollama:11434
      - DEFAULT_MODEL=mistral
      - UWSGI_PROTOCOL=fastcgi
      - UWSGI_SOCKET=/tmp/prompt.sock
      - UWSGI_CHMOD_SOCKET=666
      - RAG_SEARCH_TOP_K=100
      - RERANKER_TOP_K=20
    networks:
      - rag_network
    command: uwsgi --ini /prompt/uwsgi.ini
    profiles:
      - all
      - prompt-only
      - app-only

  # Ollama 서비스 (CPU 버전)
  ollama:
    build: ./ollama
    container_name: milvus-ollama-cpu
    volumes:
      - ./ollama:/app
      - ./volumes/ollama:/root/.ollama
      - ./volumes/logs/ollama:/var/log/ollama
    ports:
      - "11434:11434"
    networks:
      - rag_network
    profiles:
      - all
      - prompt-only
      - ollama-only
      - app-only
      - cpu-only

  # Ollama 서비스 (GPU 버전)
  ollama-gpu:
    build: ./ollama
    container_name: milvus-ollama-gpu
    volumes:
      - ./ollama:/app
      - ./volumes/ollama:/root/.ollama
      - ./volumes/logs/ollama:/var/log/ollama
    ports:
      - "11434:11434"
    networks:
      - rag_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    profiles:
      - gpu-only

networks:
  rag_network:
    name: rag_network
    external: true

volumes:
  shared_tmp:
    name: ${COMPOSE_PROJECT_NAME:-rag}_shared_tmp 